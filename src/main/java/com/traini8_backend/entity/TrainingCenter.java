package com.traini8_backend.entity;

import java.time.LocalDateTime;
import java.util.List;
import jakarta.persistence.Column;
import jakarta.persistence.Embedded;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.PrePersist;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;

@Entity
public class TrainingCenter {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer CenterId;

	@Size(max = 40 ,message = "Less than 40 characters")
	@NotBlank(message = "Center Name is Required!")
	private String CenterName;

	@Size(max = 12 , message = "Exactly 12 character alphanumeric")
	@NotBlank(message = "Center Code is Required!")
	private String CenterCode;

	@Embedded
	private Address address;

	private Integer StudentCapacity;
	
	private List<String> CoursesOffered;
	
	@Column(nullable = false , updatable = false)
	private LocalDateTime CreatedOn;
	
	@Email(message = "Invalid email address")
	private String ContactEmail;
	
	@Pattern(regexp = "^\\d{10}$", message = "Phone number must be 10 digits")
	private String ContactPhone;
	
	
	/* Epoch time generated by System */
	
	@PrePersist
	public void onCreate() {
		this.CreatedOn = LocalDateTime.now();
	}
	
	
	/* Getters and setters */

	public List<String> getCoursesOffered() {
		return CoursesOffered;
	}

	public void setCoursesOffered(List<String> coursesOffered) {
		CoursesOffered = coursesOffered;
	}

	public String getCenterName() {
		return CenterName;
	}

	public void setCenterName(String centerName) {
		CenterName = centerName;
	}

	public String getCenterCode() {
		return CenterCode;
	}

	public void setCenterCode(String centerCode) {
		CenterCode = centerCode;
	}

	public Address getAddress() {
		return address;
	}

	public void setAddress(Address address) {
		this.address = address;
	}

	public Integer getStudentCapacity() {
		return StudentCapacity;
	}

	public void setStudentCapacity(Integer studentCapacity) {
		StudentCapacity = studentCapacity;
	}

	public LocalDateTime getCreatedOn() {
		return CreatedOn;
	}

	public void setCreatedOn(LocalDateTime createdOn) {
		CreatedOn = createdOn;
	}
	
	public String getContactEmail() {
		return ContactEmail;
	}

	public void setContactEmail(String contactEmail) {
		ContactEmail = contactEmail;
	}

	public String getContactPhone() {
		return ContactPhone;
	}

	public void setContactPhone(String contactPhone) {
		ContactPhone = contactPhone;
	}
	

	/* Default Constructor */
	public TrainingCenter() {
		super();
	}

	public TrainingCenter(@Size(max = 40, message = "Less than 40 characters") String centerName,
			@Size(max = 12, message = "Exactly 12 character alphanumeric") String centerCode, Address address,
			Integer studentCapacity, List<String> coursesOffered, LocalDateTime createdOn,
			@Email(message = "Invalid email address") String contactEmail,
			@Pattern(regexp = "^\\d{10}$", message = "Phone number must be 10 digits") String contactPhone) {
		super();
		CenterName = centerName;
		CenterCode = centerCode;
		this.address = address;
		StudentCapacity = studentCapacity;
		CoursesOffered = coursesOffered;
		CreatedOn = createdOn;
		ContactEmail = contactEmail;
		ContactPhone = contactPhone;
	}

	@Override
	public String toString() {
		return "TrainingCenter [CenterName=" + CenterName + ", CenterCode=" + CenterCode
				+ ", address=" + address + ", StudentCapacity=" + StudentCapacity + ", CoursesOffered=" + CoursesOffered
				+ ", CreatedOn=" + CreatedOn + ", ContactEmail=" + ContactEmail + ", ContactPhone=" + ContactPhone
				+ "]";
	}

	
}
